{"version":3,"sources":["workers/worker.base.js"],"names":["WorkerBase","msg","namespace","crossbarConnection","exec","response","obj","session","details","Promise","resolve","then","reason","reject","cbConnection","CrossbarConnection","onJoin","onLeave","WorkerInterface"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,U;;;AACjB,0BAAc;AAAA;;AAAA;AAEb;;;;oCAEWC,G,EAAK;AAAA;;AACb,gBAAIC,YAAYD,IAAIC,SAApB;AACA,mBAAO,KAAKC,kBAAL,CAAwBC,IAAxB,CAA6BH,GAA7B,EAAkC,eAAO;AAC5C,uBAAKI,QAAL,CAAcJ,GAAd,EAAmBK,GAAnB;AACH,aAFM,CAAP;AAGH;;;iCAEQL,G,EAAKK,G,EAAK;AACf,mBAAOA,GAAP;AACH;;;+BASMC,O,EAASC,O,EAAS;AACrB,mBAAOC,QAAQC,OAAR,CAAgBH,OAAhB,EACFI,IADE,CACG,mBAAW;AACb,uBAAOJ,OAAP;AACH,aAHE,CAAP;AAIH;;;gCAEOK,M,EAAQJ,O,EAAS;AACrB,mBAAOC,QAAQI,MAAR,CAAeL,OAAf,EACFG,IADE,CACG,mBAAW;AACb,uBAAOH,OAAP;AACH,aAHE,CAAP;AAIH;;;4BAnBwB;AAAA;;AACrB,gBAAI,CAAC,KAAKM,YAAV,EAAwB;AACpB,qBAAKA,YAAL,GAAoB,IAAIC,oBAAJ,CAAuB,mBAAvB,EAA4C,UAACR,OAAD,EAAUC,OAAV,EAAsB;AAAE,2BAAO,OAAKQ,MAAL,CAAYT,OAAZ,EAAqBC,OAArB,CAAP;AAAsC,iBAA1G,EAA4G,UAACI,MAAD,EAASJ,OAAT,EAAqB;AAAE,2BAAO,OAAKS,OAAL,CAAaL,MAAb,EAAqBJ,OAArB,CAAP;AAAsC,iBAAzK,CAApB;AACH;AACD,mBAAO,KAAKM,YAAZ;AACH;;;;EArBmCI,gB;;kBAAnBlB,U","file":"worker.base.js","sourcesContent":["import CrossbarConnection from '../connection';\nimport WorkerInterface from './worker.interface';\n\nexport default class WorkerBase extends WorkerInterface {\n    constructor() {\n        super();\n    }\n\n    sendMessage(msg) {\n        let namespace = msg.namespace;\n        return this.crossbarConnection.exec(msg, obj => {\n            this.response(msg, obj);\n        });\n    }\n\n    response(msg, obj) {\n        return obj;\n    }\n\n    get crossbarConnection() {\n        if (!this.cbConnection) {\n            this.cbConnection = new CrossbarConnection('ws://127.0.0.1/ws', (session, details) => { return this.onJoin(session, details) }, (reason, details) => { return this.onLeave(reason, details) });\n        }\n        return this.cbConnection;\n    }\n\n    onJoin(session, details) {\n        return Promise.resolve(session)\n            .then(session => {\n                return session\n            });\n    }\n\n    onLeave(reason, details) {\n        return Promise.reject(details)\n            .then(details => {\n                return details;\n            });\n    }\n}"]}