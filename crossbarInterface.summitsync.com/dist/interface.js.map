{"version":3,"sources":["interface.js"],"names":["CrossbarInterface","resolve","reject","ttl","id","uuid","v1","cb","callbacks","config","Promise","handler","addCallback","requestCallback","namespace","data","request","type"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,iB;AACjB,iCAAc;AAAA;AAEb;;;;oCAEWC,O,EAASC,M,EAAQC,G,EAAK;AAC9B,gBAAIC,WAASC,eAAKC,EAAL,EAAb;AACA,gBAAIC,KAAK,EAAEN,gBAAF,EAAWC,cAAX,EAAmBC,QAAnB,EAAT;AACA,iBAAKK,SAAL,CAAeJ,EAAf,IAAqBG,EAArB;AACA,mBAAOH,EAAP;AACH;;;gCAEOK,M,EAAQ;AAAA;;AACZ,mBAAO,IAAIC,OAAJ,CAAY,UAACT,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,MAAMM,OAAOE,OAAP,IAAkBF,OAAOE,OAAP,CAAeR,GAAjC,GAAuCM,OAAOE,OAAP,CAAeR,GAAtD,GAA4D,IAAtE;AACA,oBAAIC,KAAK,MAAKQ,WAAL,CAAiBX,OAAjB,EAA0BC,MAA1B,EAAkCC,GAAlC,CAAT;AACA,uBAAO,MAAKU,eAAL,CAAqBJ,MAArB,EAA6BL,EAA7B,CAAP;AACH,aAJM,CAAP;AAKH;;;6BAEIU,S,EAAWC,I,EAAM;AAClB,mBAAO,KAAKC,OAAL,CAAa,EAAEF,oBAAF,EAAaC,UAAb,EAAmBE,MAAM,MAAzB,EAAb,CAAP;AACH;;;iCAEQH,S,EAAWC,I,EAAM;AACtB,mBAAO,KAAKC,OAAL,CAAa,EAAEF,oBAAF,EAAaC,UAAb,EAAmBE,MAAM,UAAzB,EAAb,CAAP;AACH;;;gCAEOH,S,EAAWC,I,EAAM;AACrB,mBAAO,KAAKC,OAAL,CAAa,EAAEF,oBAAF,EAAaC,UAAb,EAAmBE,MAAM,SAAzB,EAAb,CAAP;AACH;;;kCAESH,S,EAAWC,I,EAAM;AACvB,mBAAO,KAAKC,OAAL,CAAa,EAAEF,oBAAF,EAAaC,UAAb,EAAmBE,MAAM,WAAzB,EAAb,CAAP;AACH;;;oCAEWH,S,EAAWC,I,EAAM;AACzB,mBAAO,KAAKC,OAAL,CAAa,EAAEF,oBAAF,EAAaC,UAAb,EAAmBE,MAAM,aAAzB,EAAb,CAAP;AACH;;;;;;kBAtCgBjB,iB","file":"interface.js","sourcesContent":["import uuid from 'uuid';\n\nexport default class CrossbarInterface {\n    constructor() {\n\n    }\n\n    addCallback(resolve, reject, ttl) {\n        let id = `_${uuid.v1()}`;\n        let cb = { resolve, reject, ttl };\n        this.callbacks[id] = cb;      \n        return id;\n    }\n\n    request(config) {\n        return new Promise((resolve, reject) => {\n            let ttl = config.handler && config.handler.ttl ? config.handler.ttl : null;\n            let id = this.addCallback(resolve, reject, ttl);\n            return this.requestCallback(config, id);\n        });\n    }\n\n    call(namespace, data) {\n        return this.request({ namespace, data, type: 'call' });\n    }\n\n    register(namespace, data) {\n        return this.request({ namespace, data, type: 'register' });\n    }\n\n    publish(namespace, data) {\n        return this.request({ namespace, data, type: 'publish' });\n    }\n\n    subscribe(namespace, data) {\n        return this.request({ namespace, data, type: 'subscribe' });\n    }\n\n    unsubscribe(namespace, data) {\n        return this.request({ namespace, data, type: 'unsubscribe' });\n    }\n}"]}