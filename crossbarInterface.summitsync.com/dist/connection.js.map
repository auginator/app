{"version":3,"sources":["connection.js"],"names":["CrossbarConnection","wsUrl","onJoin","Promise","resolve","onLeave","connection","connected","session","autobahn","Connection","url","realm","_getSession","reject","_connect","onopen","details","then","caller_disclose_me","onclose","reason","ex","console","log","close","config","callback","_session","type","call","namespace","parameters","kwargs","options","id","status","response","error"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,kB;AACjB,gCAAYC,KAAZ,EAA4E;AAAA,YAAzDC,MAAyD,uEAAhDC,QAAQC,OAAR,EAAgD;AAAA,YAA7BC,OAA6B,uEAAnBF,QAAQC,OAAR,EAAmB;;AAAA;;AACxE,aAAKH,KAAL,GAAaA,KAAb;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKG,OAAL,GAAeA,OAAf;AACA,aAAKC,UAAL,GAAkB,IAAlB;AACA,aAAKC,SAAL,GAAiB,KAAjB;AACA,aAAKC,OAAL,GAAe,IAAf;AACH;;;;mCAEU;AACP,mBAAO,IAAIC,sBAASC,UAAb,CAAwB;AAC3BC,qBAAK,KAAKV,KADiB;AAE3BW,uBAAO;AAFoB,aAAxB,CAAP;AAIH;;;mCAEU;AAAA;;AACP,gBAAI,CAAC,KAAKC,WAAV,EAAuB;AACnB,qBAAKA,WAAL,GAAmB,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAChD,wBAAI;AACA,8BAAKR,UAAL,GAAkB,MAAKS,QAAL,EAAlB;;AAEA,8BAAKR,SAAL,GAAiB,IAAjB;;AAEA,8BAAKD,UAAL,CAAgBU,MAAhB,GAAyB,UAACR,OAAD,EAAUS,OAAV,EAAsB;AAC3C,kCAAKT,OAAL,GAAeA,OAAf;AACA,kCAAKN,MAAL,CAAYM,OAAZ,EAAqBS,OAArB,EACKC,IADL,CACU,aAAK;AACP,sCAAKV,OAAL,CAAaW,kBAAb,GAAkC,IAAlC;AACAf,wCAAQ,MAAKI,OAAb;AACH,6BAJL;AAKH,yBAPD;;AASA,8BAAKF,UAAL,CAAgBc,OAAhB,GAA0B,UAACC,MAAD,EAASJ,OAAT,EAAqB;AAC3C,kCAAKV,SAAL,GAAiB,KAAjB;AACA,kCAAKM,WAAL,GAAmB,IAAnB;AACA,kCAAKR,OAAL,CAAagB,MAAb,EAAqBJ,OAArB,EACKC,IADL,CACU,aAAK,CAAG,CADlB;AAEA,gCAAIG,WAAW,MAAf,EAAuB;AACnB,uCAAO,IAAP;AACH;AACJ,yBARD;AASH,qBAvBD,CAuBE,OAAOC,EAAP,EAAW;AACTC,gCAAQC,GAAR,CAAY,6BAAZ,EAA2CF,EAA3C;AACH;AACJ,iBA3BkB,CAAnB;AA4BH;AACD,mBAAO,KAAKT,WAAZ;AACH;;;gCAEO;AACJ,gBAAI,KAAKN,SAAT,EAAoB;AAChB,qBAAKD,UAAL,CAAgBmB,KAAhB;AACH;AACJ;;;6BAEIC,M,EAAQC,Q,EAAU;AAAA;;AACnB,mBAAO,KAAKC,QAAL,GACFV,IADE,CACG,aAAK;AACP,uBAAKQ,OAAOG,IAAZ,EAAkBH,MAAlB,EAA0BC,QAA1B;AACH,aAHE,CAAP;AAIH;;;6BAEID,M,EAAQC,Q,EAAU;AACnB,iBAAKnB,OAAL,CAAasB,IAAb,CAAkBJ,OAAOK,SAAzB,EAAoCL,OAAOM,UAA3C,EAAuDN,OAAOO,MAA9D,EAAsEP,OAAOQ,OAA7E,EACKhB,IADL,CACU,oBAAY;AACdS,yBAAS,EAAEQ,IAAIT,OAAOS,EAAb,EAAiBC,QAAQ,SAAzB,EAAoCC,kBAApC,EAAT;AACH,aAHL,EAGO,eAAO;AACNV,yBAAS,EAAEQ,IAAIT,OAAOS,EAAb,EAAiBC,QAAQ,OAAzB,EAAkCE,YAAlC,EAAT;AACH,aALL;AAMH;;;;;;kBAvEgBtC,kB","file":"connection.js","sourcesContent":["import autobahn from '../resources/autobahn.min.jgz';\n\nexport default class CrossbarConnection {\n    constructor(wsUrl, onJoin = Promise.resolve(), onLeave = Promise.resolve()) {\n        this.wsUrl = wsUrl;\n        this.onJoin = onJoin;\n        this.onLeave = onLeave;\n        this.connection = null;\n        this.connected = false;\n        this.session = null;\n    }\n\n    _connect() {\n        return new autobahn.Connection({\n            url: this.wsUrl,\n            realm: 'realm1'\n        });\n    }\n\n    _session() {\n        if (!this._getSession) {\n            this._getSession = new Promise((resolve, reject) => {\n                try {\n                    this.connection = this._connect();\n\n                    this.connected = true;\n\n                    this.connection.onopen = (session, details) => {\n                        this.session = session;\n                        this.onJoin(session, details)\n                            .then(_ => {\n                                this.session.caller_disclose_me = true;\n                                resolve(this.session);\n                            });\n                    }\n\n                    this.connection.onclose = (reason, details) => {\n                        this.connected = false;\n                        this._getSession = null;\n                        this.onLeave(reason, details)\n                            .then(_ => { });\n                        if (reason === 'lost') {\n                            return true;\n                        }\n                    }\n                } catch (ex) {\n                    console.log('autobahn connection error: ', ex);\n                }\n            });\n        }\n        return this._getSession;\n    }\n\n    close() {\n        if (this.connected) {\n            this.connection.close();\n        }\n    }\n\n    exec(config, callback) {\n        return this._session()\n            .then(_ => {\n                this[config.type](config, callback);\n            });\n    }\n\n    call(config, callback) {\n        this.session.call(config.namespace, config.parameters, config.kwargs, config.options)\n            .then(response => {\n                callback({ id: config.id, status: 'success', response });\n            }, err => {\n                callback({ id: config.id, status: 'error', error });\n            });\n    }\n}"]}